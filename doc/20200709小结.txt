JavaScript定义接口的三种方式:
1.注解描述
优点,可以有一个参考 缺点:完全没有检查接口的方法是否被实现
2.属性检测
属性检测的方式 没有面向对象的属性
3.鸭式辨形
鸭式辨形法 最完美的JS实现接口方式
实现的核心:1个类实现接口的主要目的,把接口里的方法都实现(检测方法)
完全面向对象,代码也实现统一,也解耦了
1.接口类 Class interface ==>实例化接口 需要两个参数 1.接口的名字 2.接收方法名称的集合(数组)
接口:
坏处:中小型程序使用接口不明智,增加复杂度.
好处:促进代码重用,减少类与类冲突,实现解耦,对于调试和测试也会变得轻松,减少类型不匹配的出现
单体模式(singleton) JS最基本和常用的模式
简单单体 只创建一份实例
闭包单体 主要目的:保护数据
惰性单体 和闭包单体类似,可以自定义返回的对象
分支单体 判断程序的分支